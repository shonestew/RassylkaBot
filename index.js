const { Telegraf } = require('telegraf') 
const fs = require('fs') 
 
const token = '7453336444:AAE4WJ9gyZV-iui2y8x5_fHu2LGGr5o85sY' 
 
const bot = new Telegraf(token); 
 
const admins = ['shonestew'] 
 
function addUser(users) { 
    fs.writeFileSync('usernames.json', JSON.stringify(users, null, 2)); 
} 
 
function checkUser() { 
    try { 
        const data = fs.readFileSync("usernames.json", "utf8"); 
        return JSON.parse(data); 
    } catch (err) { 
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', err); 
        return {}; 
    } 
} 
 
bot.command('start', async (ctx) => { 
    try { 
        const userCheck = checkUser() 
        const chatId = ctx.message.chat.id; 
        ctx.telegram.sendMessage(chatId, 'üî∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ "/off"') 
        if (!userCheck.includes(chatId.toString())) { 
            const users = [] 
            users.push(chatId.toString()); 
            addUser(users) 
            ctx.telegram.sendMessage(chatId, '‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏!') 
        } else { 
            ctx.telegram.sendMessage(chatId, '–í—ã –∏—Ç–∞–∫ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.') 
        }; 
    } catch (err) { 
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–π–¥–∏:', err) 
    } 
}); 
 
bot.command('off', async (ctx) => { 
    try { 
        const usersList = checkUser() 
        const chatId = ctx.message.chat.id.toString() 
        if (usersList.includes(chatId)) { 
            const users = usersList.filter(id => id !== chatId); 
            addUser(users); 
            ctx.telegram.sendMessage(chatId, '‚úÖ –í—ã –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏!') 
        } else { 
            ctx.telegram.sendMessage(chatId, '–í—ã –∏—Ç–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏.'); 
        } 
    } catch (err) { 
        console.log('–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –∞–π–¥–∏:', err) 
    } 
}); 
 
bot.command('rassyl', async (ctx) => { 
    try { 
        const userCheck = checkUser() 
        if (admins.includes(ctx.message.from.username)) { 
            ctx.telegram.sendMessage(ctx.message.chat.id, '‚úè –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.') 
            bot.on('message', async (ctx2) => { 
                userCheck.forEach( async (chatId) => await ctx.telegram.sendMessage(chatId, ctx2.message.text.replace('/rassyl ', '')) ) 
                ctx.telegram.sendMessage(ctx.message.chat.id, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –≤ —Å–ø–∏—Å–∫–µ!') 
            }) 
        } else { 
            await ctx.telegram.sendMessage(chatId, '‚õî –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!') 
            return; 
        } 
    } catch (err) { 
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:', err) 
    } 
}) 
 
bot.launch()
